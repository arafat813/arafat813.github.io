<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js设计模式-单例模式</title>
      <link href="/posts/888898f6.html"/>
      <url>/posts/888898f6.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h1><p>  单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>  这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>  注意：<br>  1、单例类只能有一个实例。<br>  2、单例类必须自己创建自己的唯一实例。<br>  3、单例类必须给所有其他对象提供这一实例。</p><h1 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h1><p>  肯定是有一个变量将第一次new生成的实例对象保存了下来，后面再执行new的时候，就直接返回第一次生成的实例对象，这样就实现了单例。</p><h1 id="主要优点："><a href="#主要优点：" class="headerlink" title="主要优点："></a>主要优点：</h1><p>  1、提供了对唯一实例的受控访问。<br>  2、由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。<br>  3、允许可变数目的实例。</p><h1 id="主要缺点："><a href="#主要缺点：" class="headerlink" title="主要缺点："></a>主要缺点：</h1><p>  1、由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。<br>  2、单例类的职责过重，在一定程度上违背了“单一职责原则”。<br>  3、滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</p><h1 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h1><p>  在以下情况下可以考虑使用单例模式：</p><ul><li>(1) 系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器或资源管理器，或者需要考虑资源消耗太大而只允许创建一个对象。</li><li>(2) 客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li></ul><h1 id="附代码"><a href="#附代码" class="headerlink" title="附代码"></a>附代码</h1>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">let</span> <span class="title class_">CreateSingleton</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="keyword">return</span> instance = <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="title class_">CreateSingleton</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Winner</span> = <span class="keyword">new</span> <span class="title class_">CreateSingleton</span>(<span class="string">&#x27;Winner&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Looser</span> = <span class="keyword">new</span> <span class="title class_">CreateSingleton</span>(<span class="string">&#x27;Looser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span> === <span class="title class_">Looser</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span>.<span class="title function_">getName</span>());  <span class="comment">// &#x27;Winner&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Looser</span>.<span class="title function_">getName</span>());  <span class="comment">// &#x27;Winner&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Winner</span>) <span class="comment">// &#x27;Winner&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Looser</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack基础教程</title>
      <link href="/posts/4db0c680.html"/>
      <url>/posts/4db0c680.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h1><pre><code>webpack是一个打包工具，他的宗旨是一切静态资源皆可打包。有人就会问为什么要webpack？webpack是现代前端技术的基石，常规的开发方式，比如jquery,html,css静态网页开发已经落后了。现在是MVVM的时代，数据驱动界面。webpack它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</code></pre><h2 id="Webpack-五个核心"><a href="#Webpack-五个核心" class="headerlink" title="Webpack 五个核心"></a>Webpack 五个核心</h2><pre><code>1.Entry    入口(Entry)指示Webpack以哪个文件为入口起点开始打包，分析构建内部依赖图。2.Output    输出(Output)指示Webpack打包后的资源bundles输出到哪里去，以及如何命名。3.Loader    Loader让Webpack能够去处理那些非JavaScript文件(webpack自身只理解Javascript)4.Plugins    插件(plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，    一直到重新定义环境中的变量等。5.Mode    模式(mode)指示Webpack使用相应模式的配置    选项：        1)development 能让代码本地调试运行的环境        2)production  能让代码优化上线运行的环境</code></pre><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><pre><code>小于8kb 压缩成base64  变成字符串    优势：不需要额外发请求 减少请求资源 降低服务器压力    劣势：体积变大    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp|svg)$/</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>, <span class="comment">//会转化成base64</span></span><br><span class="line">    <span class="attr">parser</span>: &#123;</span><br><span class="line">        <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">8</span> * <span class="number">1024</span>, <span class="comment">//8kb</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">generator</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出图片名称</span></span><br><span class="line">    <span class="comment">// [hash:10] 表示只取 前十位</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;static/img/[hash:10][ext][query]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></code></pre><h2 id="处理js-资源"><a href="#处理js-资源" class="headerlink" title="处理js 资源"></a>处理js 资源</h2><pre><code>有人可能会问，js 资源 Webpack 不能已经处理了吗，为什么我们还要处理呢?    原因是 Webpack 对s 处理是有限的，只能编译s 中 ES 模块化语法，不能编译其他语法，导致s 不能在E 等浏览器运行，所以我们希望做一些兼容性处理。    其次开发中，团队对代码格式是有严格要求的，我们不能由肉眼去检测代码格式，需要使用专业的工具来检测。。针对is兼容性处理，我们便用 Babel 来完成。针对代码格式，我们使用 Eslint 来完成我们先完成 Eslint，检测代码格式无误后，在由 Babel 做代码兼容性处理</code></pre><h2 id="Eslint"><a href="#Eslint" class="headerlink" title="Eslint"></a>Eslint</h2><pre><code>可组装的 JavaScript 和JSX 检查工具这句话意思就是:它是用来检测 is 和sx 语法的工具。可以配置各项功能我们使用 Eslint，关键是写 Eslint 配置文件，里面写上各种 rules 规则，将来运行 Eslint 时就会以写的规则对代码进行检查</code></pre><h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><pre><code>JavaScript 编译器。主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境 </code></pre><h2 id="开发服务器-amp-自动化"><a href="#开发服务器-amp-自动化" class="headerlink" title="开发服务器&amp;自动化"></a>开发服务器&amp;自动化</h2><pre><code>每次写完代码都需要手动输入指令才能编译代码，太麻烦了，我们希望一切自动化第一步: 下载包    npm i webpack-dev-server -D第二步: 配置    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开发服务器: : 不会输出资源 不会去进行打包 在内存中打包 </span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></code></pre><h2 id="生产模式"><a href="#生产模式" class="headerlink" title="生产模式"></a>生产模式</h2><pre><code>生产模式是开发完成代码后，我们需要得到代码将来部署上线。这个模式下我们主要对代码进行优化，让其运行性能更好。优化主要从两个角度出发:1.优化代码运行性能2.优化代码打包速度</code></pre><h2 id="Css-处理"><a href="#Css-处理" class="headerlink" title="Css 处理"></a>Css 处理</h2><pre><code>#提取 Css 成单独文件Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式这样对于网站来说，会出现闪屏现象，用户体验不好我们应该是单独的 Css 文件，通过 link 标签加载性能才好npm i mini-css-extract-plugin -D</code></pre><h2 id="Css-兼容性处理"><a href="#Css-兼容性处理" class="headerlink" title="Css 兼容性处理"></a>Css 兼容性处理</h2><pre><code>1. 下载包npm i postcss-loader postcss postcss-preset-env -Dcss-loder 下面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>再去package.json 取配置  兼容到什么程度</code></pre><h1 id="开发模式参考：-生产模式稍加修改就可以"><a href="#开发模式参考：-生产模式稍加修改就可以" class="headerlink" title="开发模式参考：(生产模式稍加修改就可以)"></a>开发模式参考：(生产模式稍加修改就可以)</h1><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    webpack.config.js webpack的配置文件</span></span><br><span class="line"><span class="comment">        作用：指示webpack干哪些活（当你运行webpack指令时，会加载里面的配置）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    所有构建工具都是基于nodejs平台运行~ 模块化默认采用commonjs</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// resoleve用来拼接绝对路径的方法</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;eslint-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来获取样式的loader</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStyle</span>(<span class="params">pre</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>[</span><br><span class="line">        <span class="comment">//   &#x27;style-loader&#x27;, // 将js种css通过创建style标签 添加到html文件中生效</span></span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">// 提取css成单独的文件</span></span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span>, <span class="comment">//将css编译成commonjs模块到js种</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">                <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">            ],</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        pre,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 写webpack配置</span></span><br><span class="line">    <span class="comment">// 入口起点</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 所有文件的输出路径</span></span><br><span class="line">        <span class="comment">// 入口文件打包输出文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;static/js/dist.js&#x27;</span>,</span><br><span class="line">        <span class="comment">// 输出路径</span></span><br><span class="line">        <span class="comment">// _dirname nodejs的变量，代表当前文件的目录绝对路径</span></span><br><span class="line">        <span class="comment">// path: path.resolve(__dirname, &#x27;../dist&#x27;),</span></span><br><span class="line">        <span class="comment">// 开发模式 无需输出</span></span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, </span><br><span class="line">        <span class="comment">// 自动清空上次打包</span></span><br><span class="line">        <span class="comment">// 原理：将path整个目录清空 再打包</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 加载器</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">// loader的配置</span></span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 每个文件只能被其中的一个loader配置处理</span></span><br><span class="line">                <span class="attr">oneOf</span>:[</span><br><span class="line">                    &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">//只检测 css</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyle</span>()</span><br><span class="line">                    &#125;, <span class="comment">// 执行顺序 从右到左  从下到上</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyle</span>(<span class="string">&#x27;less-loader&#x27;</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp|svg)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;asset&#x27;</span>, <span class="comment">//会转化成base64</span></span><br><span class="line">                        <span class="attr">parser</span>: &#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">8</span> * <span class="number">1024</span>, <span class="comment">//8kb</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 输出图片名称</span></span><br><span class="line">                            <span class="comment">// [hash:10] 表示只取 前十位</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/img/[hash:10][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?|mp3|mp4|avi)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>, <span class="comment">//不会转化成base64</span></span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 输出图片名称</span></span><br><span class="line">                            <span class="comment">// [hash:10] 表示只取 前十位</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&#x27;static/media/[hash:10][ext][query]&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                        <span class="comment">// exclude: /(node_modules|bower_components)/, //排除文件</span></span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">                        <span class="attr">use</span>: &#123;</span><br><span class="line">                            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                        <span class="comment">//   options: &#123;</span></span><br><span class="line">                        <span class="comment">//     presets: [&#x27;@babel/preset-env&#x27;]</span></span><br><span class="line">                        <span class="comment">//   &#125;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 详细的loader配置</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     // 匹配哪些文件</span></span><br><span class="line">            <span class="comment">//     test: /\.css$/,</span></span><br><span class="line">            <span class="comment">//     // 使用哪些loader进行处理</span></span><br><span class="line">            <span class="comment">//     use: [</span></span><br><span class="line">            <span class="comment">//         // use数组中执行顺序：从右到左，从下到上，依次执行</span></span><br><span class="line">            <span class="comment">//         // 创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line">            <span class="comment">//         // &#x27;style-loader&#x27;,</span></span><br><span class="line">            <span class="comment">//         // 将css文件变成conmonjs模块加载js中,里面内容时样式字符串</span></span><br><span class="line">            <span class="comment">//         // &#x27;css-loader&#x27;,</span></span><br><span class="line">            <span class="comment">//         &#x27;style-loader&#x27;,</span></span><br><span class="line">            <span class="comment">//         &#x27;css-loader&#x27;</span></span><br><span class="line">            <span class="comment">//     ]</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// plugins的配置</span></span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="comment">// 详细的plugins的配置</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 检测哪些文件</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src&#x27;</span>),</span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开发服务器: 不会输出资源 不会去进行打包 在内存中打包 </span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启HMR功能（只能用于开发环境，生产环境不需要了）</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 模式</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行方式:</span></span><br><span class="line"><span class="comment">//   npx webpack serve --config ./config/webpack.dev.js</span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
